# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import chord_pb2 as chord__pb2


class chordRPCStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.get_successor = channel.unary_unary(
                '/chord.chordRPC/get_successor',
                request_serializer=chord__pb2.Empty.SerializeToString,
                response_deserializer=chord__pb2.Node.FromString,
                )
        self.get_predecessor = channel.unary_unary(
                '/chord.chordRPC/get_predecessor',
                request_serializer=chord__pb2.Empty.SerializeToString,
                response_deserializer=chord__pb2.Node.FromString,
                )
        self.find_predecessor_rpc = channel.unary_unary(
                '/chord.chordRPC/find_predecessor_rpc',
                request_serializer=chord__pb2.HashKey.SerializeToString,
                response_deserializer=chord__pb2.Node.FromString,
                )
        self.find_successor_rpc = channel.unary_unary(
                '/chord.chordRPC/find_successor_rpc',
                request_serializer=chord__pb2.HashKey.SerializeToString,
                response_deserializer=chord__pb2.Node.FromString,
                )
        self.get_data = channel.unary_unary(
                '/chord.chordRPC/get_data',
                request_serializer=chord__pb2.Node.SerializeToString,
                response_deserializer=chord__pb2.Data.FromString,
                )
        self.set_data = channel.unary_unary(
                '/chord.chordRPC/set_data',
                request_serializer=chord__pb2.Data.SerializeToString,
                response_deserializer=chord__pb2.Empty.FromString,
                )
        self.change_finger_create_rpc = channel.unary_unary(
                '/chord.chordRPC/change_finger_create_rpc',
                request_serializer=chord__pb2.NodeI.SerializeToString,
                response_deserializer=chord__pb2.Empty.FromString,
                )
        self.change_finger_delete_rpc = channel.unary_unary(
                '/chord.chordRPC/change_finger_delete_rpc',
                request_serializer=chord__pb2.NodeII.SerializeToString,
                response_deserializer=chord__pb2.Empty.FromString,
                )
        self.change_predecessor = channel.unary_unary(
                '/chord.chordRPC/change_predecessor',
                request_serializer=chord__pb2.Node.SerializeToString,
                response_deserializer=chord__pb2.Empty.FromString,
                )
        self.change_successor = channel.unary_unary(
                '/chord.chordRPC/change_successor',
                request_serializer=chord__pb2.Node.SerializeToString,
                response_deserializer=chord__pb2.Empty.FromString,
                )
        self.del_key_rpc = channel.unary_unary(
                '/chord.chordRPC/del_key_rpc',
                request_serializer=chord__pb2.KeyValue.SerializeToString,
                response_deserializer=chord__pb2.Empty.FromString,
                )
        self.add_key_rpc = channel.unary_unary(
                '/chord.chordRPC/add_key_rpc',
                request_serializer=chord__pb2.KeyValue.SerializeToString,
                response_deserializer=chord__pb2.Empty.FromString,
                )
        self.get_key_rpc = channel.unary_unary(
                '/chord.chordRPC/get_key_rpc',
                request_serializer=chord__pb2.KeyValue.SerializeToString,
                response_deserializer=chord__pb2.KeyValue.FromString,
                )
        self.direct_add_rpc = channel.unary_unary(
                '/chord.chordRPC/direct_add_rpc',
                request_serializer=chord__pb2.KeyValue.SerializeToString,
                response_deserializer=chord__pb2.Empty.FromString,
                )
        self.direct_del_rpc = channel.unary_unary(
                '/chord.chordRPC/direct_del_rpc',
                request_serializer=chord__pb2.KeyValue.SerializeToString,
                response_deserializer=chord__pb2.Empty.FromString,
                )
        self.direct_get_rpc = channel.unary_unary(
                '/chord.chordRPC/direct_get_rpc',
                request_serializer=chord__pb2.KeyValue.SerializeToString,
                response_deserializer=chord__pb2.KeyValue.FromString,
                )
        self.leave_rpc = channel.unary_unary(
                '/chord.chordRPC/leave_rpc',
                request_serializer=chord__pb2.Empty.SerializeToString,
                response_deserializer=chord__pb2.Empty.FromString,
                )


class chordRPCServicer(object):
    """Missing associated documentation comment in .proto file."""

    def get_successor(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_predecessor(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def find_predecessor_rpc(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def find_successor_rpc(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_data(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def set_data(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def change_finger_create_rpc(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def change_finger_delete_rpc(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def change_predecessor(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def change_successor(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def del_key_rpc(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def add_key_rpc(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_key_rpc(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def direct_add_rpc(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def direct_del_rpc(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def direct_get_rpc(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def leave_rpc(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_chordRPCServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'get_successor': grpc.unary_unary_rpc_method_handler(
                    servicer.get_successor,
                    request_deserializer=chord__pb2.Empty.FromString,
                    response_serializer=chord__pb2.Node.SerializeToString,
            ),
            'get_predecessor': grpc.unary_unary_rpc_method_handler(
                    servicer.get_predecessor,
                    request_deserializer=chord__pb2.Empty.FromString,
                    response_serializer=chord__pb2.Node.SerializeToString,
            ),
            'find_predecessor_rpc': grpc.unary_unary_rpc_method_handler(
                    servicer.find_predecessor_rpc,
                    request_deserializer=chord__pb2.HashKey.FromString,
                    response_serializer=chord__pb2.Node.SerializeToString,
            ),
            'find_successor_rpc': grpc.unary_unary_rpc_method_handler(
                    servicer.find_successor_rpc,
                    request_deserializer=chord__pb2.HashKey.FromString,
                    response_serializer=chord__pb2.Node.SerializeToString,
            ),
            'get_data': grpc.unary_unary_rpc_method_handler(
                    servicer.get_data,
                    request_deserializer=chord__pb2.Node.FromString,
                    response_serializer=chord__pb2.Data.SerializeToString,
            ),
            'set_data': grpc.unary_unary_rpc_method_handler(
                    servicer.set_data,
                    request_deserializer=chord__pb2.Data.FromString,
                    response_serializer=chord__pb2.Empty.SerializeToString,
            ),
            'change_finger_create_rpc': grpc.unary_unary_rpc_method_handler(
                    servicer.change_finger_create_rpc,
                    request_deserializer=chord__pb2.NodeI.FromString,
                    response_serializer=chord__pb2.Empty.SerializeToString,
            ),
            'change_finger_delete_rpc': grpc.unary_unary_rpc_method_handler(
                    servicer.change_finger_delete_rpc,
                    request_deserializer=chord__pb2.NodeII.FromString,
                    response_serializer=chord__pb2.Empty.SerializeToString,
            ),
            'change_predecessor': grpc.unary_unary_rpc_method_handler(
                    servicer.change_predecessor,
                    request_deserializer=chord__pb2.Node.FromString,
                    response_serializer=chord__pb2.Empty.SerializeToString,
            ),
            'change_successor': grpc.unary_unary_rpc_method_handler(
                    servicer.change_successor,
                    request_deserializer=chord__pb2.Node.FromString,
                    response_serializer=chord__pb2.Empty.SerializeToString,
            ),
            'del_key_rpc': grpc.unary_unary_rpc_method_handler(
                    servicer.del_key_rpc,
                    request_deserializer=chord__pb2.KeyValue.FromString,
                    response_serializer=chord__pb2.Empty.SerializeToString,
            ),
            'add_key_rpc': grpc.unary_unary_rpc_method_handler(
                    servicer.add_key_rpc,
                    request_deserializer=chord__pb2.KeyValue.FromString,
                    response_serializer=chord__pb2.Empty.SerializeToString,
            ),
            'get_key_rpc': grpc.unary_unary_rpc_method_handler(
                    servicer.get_key_rpc,
                    request_deserializer=chord__pb2.KeyValue.FromString,
                    response_serializer=chord__pb2.KeyValue.SerializeToString,
            ),
            'direct_add_rpc': grpc.unary_unary_rpc_method_handler(
                    servicer.direct_add_rpc,
                    request_deserializer=chord__pb2.KeyValue.FromString,
                    response_serializer=chord__pb2.Empty.SerializeToString,
            ),
            'direct_del_rpc': grpc.unary_unary_rpc_method_handler(
                    servicer.direct_del_rpc,
                    request_deserializer=chord__pb2.KeyValue.FromString,
                    response_serializer=chord__pb2.Empty.SerializeToString,
            ),
            'direct_get_rpc': grpc.unary_unary_rpc_method_handler(
                    servicer.direct_get_rpc,
                    request_deserializer=chord__pb2.KeyValue.FromString,
                    response_serializer=chord__pb2.KeyValue.SerializeToString,
            ),
            'leave_rpc': grpc.unary_unary_rpc_method_handler(
                    servicer.leave_rpc,
                    request_deserializer=chord__pb2.Empty.FromString,
                    response_serializer=chord__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'chord.chordRPC', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class chordRPC(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def get_successor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/chord.chordRPC/get_successor',
            chord__pb2.Empty.SerializeToString,
            chord__pb2.Node.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_predecessor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/chord.chordRPC/get_predecessor',
            chord__pb2.Empty.SerializeToString,
            chord__pb2.Node.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def find_predecessor_rpc(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/chord.chordRPC/find_predecessor_rpc',
            chord__pb2.HashKey.SerializeToString,
            chord__pb2.Node.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def find_successor_rpc(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/chord.chordRPC/find_successor_rpc',
            chord__pb2.HashKey.SerializeToString,
            chord__pb2.Node.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_data(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/chord.chordRPC/get_data',
            chord__pb2.Node.SerializeToString,
            chord__pb2.Data.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def set_data(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/chord.chordRPC/set_data',
            chord__pb2.Data.SerializeToString,
            chord__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def change_finger_create_rpc(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/chord.chordRPC/change_finger_create_rpc',
            chord__pb2.NodeI.SerializeToString,
            chord__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def change_finger_delete_rpc(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/chord.chordRPC/change_finger_delete_rpc',
            chord__pb2.NodeII.SerializeToString,
            chord__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def change_predecessor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/chord.chordRPC/change_predecessor',
            chord__pb2.Node.SerializeToString,
            chord__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def change_successor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/chord.chordRPC/change_successor',
            chord__pb2.Node.SerializeToString,
            chord__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def del_key_rpc(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/chord.chordRPC/del_key_rpc',
            chord__pb2.KeyValue.SerializeToString,
            chord__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def add_key_rpc(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/chord.chordRPC/add_key_rpc',
            chord__pb2.KeyValue.SerializeToString,
            chord__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_key_rpc(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/chord.chordRPC/get_key_rpc',
            chord__pb2.KeyValue.SerializeToString,
            chord__pb2.KeyValue.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def direct_add_rpc(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/chord.chordRPC/direct_add_rpc',
            chord__pb2.KeyValue.SerializeToString,
            chord__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def direct_del_rpc(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/chord.chordRPC/direct_del_rpc',
            chord__pb2.KeyValue.SerializeToString,
            chord__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def direct_get_rpc(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/chord.chordRPC/direct_get_rpc',
            chord__pb2.KeyValue.SerializeToString,
            chord__pb2.KeyValue.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def leave_rpc(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/chord.chordRPC/leave_rpc',
            chord__pb2.Empty.SerializeToString,
            chord__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
